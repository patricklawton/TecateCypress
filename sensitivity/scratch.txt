for sample in eps space:
    store <Ps> in a collective array across (C,ncell,tau_i) 
    OR
    just keep the max(<Ps>) across (ncell, tau_i) given C
    in separate array, store omega values per eps sample

for C in C_vec
    for omega samples
        filter for lte omega in omega_eps array
        slice collective <Ps> array
        find and store max(<Ps>) for plotting
--------------------------------------------------------------

phase.h5
    mu_tau
        sigm_tau
            <metric> no change value
            mu_tauc
                sigm_tauc
                    <metric> data cube over (C, ncell, tau_i)

We don't need delta_tau_i for reference to phase data anymore, so maybe just remove creation of delta_tau_vec from init and add attribute for a given uncertainty value under product uncertainty loop in phase.py
Or maybe make a separate method for setting tau uncertainty, called before process_samples, within which the attributes are set. 
In here or separate method, could also pre_generate tauc uncertainties? Might be too much to carry in memory at once, could generate per (C,ncell) combo just before calling process_samples (especially when diong tau scaling cases, but also might be fine on memory)

define uncertainty ranges
save to file(s)
for (mu_tau, sigm_tau) in product(...):
    pproc.generate_tau_eps(mu_tau, sigm_tau)
    for (mu_tauc, sigm_tauc) in product(...):
        '''Just generate vec of len tau_flat with tauc_eps and (randomly?) select ncell values each iteration below'''
        pproc.generate_tauc_eps(mu_tauc, sigm_tauc)
        for (C, ncell) in product(...):
            pproc.process_samples(C, ncell)
